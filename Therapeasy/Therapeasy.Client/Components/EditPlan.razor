@page "/editplan"
@page "/editplan/{PlanId:int}"
@page "/editplan/{PlanId:int}/{Detail?}"

@rendermode InteractiveServer
@using Therapeasy.Enums
@using Therapeasy.Model
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
<AuthorizeView Roles="Therapist,Admin" Context="authContext">
    <EditForm Model="@plan" OnSubmit="UpdatePlan">
        <div class="form-child form-label"><label>Plan name (do NOT use identifiable information)</label></div>
        <div class="form-child"><InputText @bind-Value="plan.Name" style="min-width:350px" /></div>
        <div class="form-child form-label"><label>Body region</label></div>
        <div class="form-child"><InputSelect @bind-Value="plan.BodyRegion">
            @foreach (Enum bodyRegion in Enum.GetValues(typeof(Enums.BodyRegion)))
            {
                <option value="@bodyRegion">@bodyRegion.GetDisplayName()</option>
            }
        </InputSelect></div>
        <div><button class="btn-primary" type="submit">Update plan</button></div>
    </EditForm>

    @if (Detail == "detailed")
    {
        @foreach (PlanExerciseLink link in planExerciseLinks.Where(l => l.PlanId == plan.Id))
        {
        <ThisExercise ExerciseId="link.ExerciseId" Detail=@Detail />
        <div>
            <button class="btn btn-danger" @onclick=@(e => DeleteExercise(link.ExerciseId))>Delete exercise</button>
        </div>
        <hr />
        }
        <ConfirmDelete @ref="ConfirmDialog"
                    Title="Delete Confirmation"
                    Message="Are you sure you want to delete this exercise?"
                    OnClose="HandleDialogClose" />
        <div class="add-item-block">
          <h3>Add an exercise to this plan: </h3>
          <EditForm Model="@exerciseToAdd" OnSubmit="Submit">
              <div class="form-child form-label"><label>Exercise name (do NOT use identifiable information)</label></div>
              <div class="form-child"><InputText @bind-Value="exerciseToAdd.Name" style="min-width:350px" /></div>
              <div class="form-child form-label"><label>Notes (do NOT use identifiable information)</label></div>
              <div class="form-child"><InputTextArea @bind-Value="exerciseToAdd.Notes" style="min-width:350px" /></div>
              <div class="form-child form-label"><label>Sets per day</label></div>
              <div class="form-child"><InputNumber @bind-Value="exerciseToAdd.SetsPerDay" /></div>
              <div class="form-child form-label"><label>Reps per set</label></div>
              <div class="form-child"><InputNumber @bind-Value="exerciseToAdd.RepsPerSet" /></div>
              <div><button class="btn btn-success" type="submit">Add exercise</button></div>
          </EditForm>
        </div>
    }
</AuthorizeView>

@code {
    [Parameter]
    public int PlanId { get; set; } = 0;
    [Parameter]
    public string Detail { get; set; } = "nodetail";
    [Parameter]
    public EventCallback OnUpdate { get; set; }
    Plan plan = new Plan();
    Exercise exerciseToAdd = new();

    List<PlanExerciseLink> planExerciseLinks = new();
    private ConfirmDelete ConfirmDialog;
    private int exerciseDlt = -1;
    
    private async void UpdatePlan() 
    {
      var json = JsonSerializer.Serialize(plan);
      var content = new StringContent(json, Encoding.UTF8, "application/json");
      var response = await HttpClient.PutAsync(NavigationManager.BaseUri + "plandb/update/plan/" + plan.Id, content);
      if (!response.IsSuccessStatusCode)
      {
          Console.WriteLine($"Error: {response.StatusCode}");
          return;
      }
      await OnUpdate.InvokeAsync();
    }

    void DeleteExercise(int id)
    {
      exerciseDlt = id;
      ConfirmDialog.Show();
    }

    private async void HandleDialogClose(bool confirmed)
    {
        if (confirmed)
        {
          var response = await HttpClient.DeleteAsync(NavigationManager.BaseUri + "plandb/delete/exercise/" + exerciseDlt);
          await LoadPlan();
        }
        else
        {
          Console.WriteLine("Action canceled.");
        }
        exerciseDlt = -1;
    }
    private async void Submit() 
    {
      // save new plan to db
      exerciseToAdd.CreatedByUser = plan.CreatedByUser;
      exerciseToAdd.DateCreated = DateTime.Now.Date;
      var json = JsonSerializer.Serialize(exerciseToAdd);
      var content = new StringContent(json, Encoding.UTF8, "application/json");
      var response = await HttpClient.PostAsync(NavigationManager.BaseUri + "plandb/create/exercise/", content);
      if (!response.IsSuccessStatusCode)
      {
          Console.WriteLine($"Error: {response.StatusCode}");
          return;
      }
      var options = new JsonSerializerOptions
      {
          PropertyNameCaseInsensitive = true
      };
      string jsonString = response.Content.ReadAsStringAsync().Result;
      if (jsonString != null && jsonString != "")
      {
        Exercise? returnExercise = JsonSerializer.Deserialize<Exercise>(jsonString, options);
        if (returnExercise != null)
        {
          PlanExerciseLink linkToAdd = new(){ PlanId = plan.Id, ExerciseId = returnExercise.Id };
          json = JsonSerializer.Serialize(linkToAdd);
          content = new StringContent(json, Encoding.UTF8, "application/json");
          response = await HttpClient.PostAsync(NavigationManager.BaseUri + "plandb/create/planexerciselink/", content);
          if (!response.IsSuccessStatusCode)
          {
              Console.WriteLine($"Error: {response.StatusCode}");
              return;
          }
        }
      }
      exerciseToAdd = new();
      await LoadPlan();
      await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
      
      await LoadPlan();
    }
    private async Task LoadPlan()
    {
        if (PlanId > 0)
        {
          var responsePlan = await HttpClient.GetFromJsonAsync<Plan>(NavigationManager.BaseUri + "plandb/get/planfromid/" + PlanId);
          if (responsePlan != null)
          {
            plan = responsePlan;
            var responseLinks = await HttpClient.GetFromJsonAsync<List<PlanExerciseLink>>(NavigationManager.BaseUri + "plandb/get/planexerciselinksforplan/" + plan.Id);
            if (responseLinks != null) planExerciseLinks.AddRange(responseLinks);
          }
        }
    }
}