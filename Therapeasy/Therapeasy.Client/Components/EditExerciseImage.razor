@page "/editexerciseimage"
@page "/editexerciseimage/{ExerciseId:int}"
@rendermode InteractiveServer
@using Therapeasy.Model
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@* <h5>Exercise @ExerciseId Image</h5> *@
<div class="row-container">
@if (imgToAdd.Id > 0)
{
    <div>
        <ViewExerciseImage ExerciseImageId="@imgToAdd.Id" />
    </div>
}
else if (imgToAdd.ImageData.Length > 1) 
{
    <img class="exercise-image" src="@imgSrc" />
    @if (imgUnsaved)
    {
        <button @onclick="SaveImage">Save</button>
        // save button
    }
}
@code {
    [Parameter]
    public int ExerciseId { get; set; } = 0;
    public string Username { get; set; } = "";
    public bool imgUnsaved { get; set; } = false;
    public ExerciseImage imgToAdd = new ExerciseImage();
    public string imgSrc = "";
    public Exercise exercise = new Exercise();

    protected override async Task OnInitializedAsync()
    {
        await LoadExerciseImage();
    }

    private async Task LoadExerciseImage()
    {
        if (ExerciseId > 0) 
        {
            var fetchedExercise = await HttpClient.GetFromJsonAsync<Exercise>(NavigationManager.BaseUri + "plandb/get/exercisefromid/" + ExerciseId);
            if (fetchedExercise != null)
            {
                exercise = fetchedExercise;
                if (!imgUnsaved && exercise.ExerciseImageId > 0)
                {
                    var fetchedImage = await HttpClient.GetFromJsonAsync<ExerciseImage>(NavigationManager.BaseUri + "plandb/get/exerciseimagefromid/" + exercise.ExerciseImageId);
                    if (fetchedImage != null) imgToAdd = fetchedImage;
                }
            }
            imgSrc = imgToAdd.GetImageForDisplay();
            StateHasChanged();
        }
    }
    private async void UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        string[] validContentTypes = { "image/gif", "image/jpeg", "image/png" };
        if (file != null && validContentTypes.Contains(file.ContentType))
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5).CopyToAsync(memoryStream); // 5MB limit
            byte[] imageBytes = memoryStream.ToArray();

            imgToAdd = new ExerciseImage(){ Id = 0, Name = file.Name, ImageData = imageBytes, ContentType = file.ContentType };
            imgUnsaved = true;
            await LoadExerciseImage();
        }
    }
    private async Task SaveImage() {
        // save img to database
        imgToAdd.CreatedByUser = exercise.CreatedByUser;
        imgToAdd.DateCreated = DateTime.Now.Date;
        var json = JsonSerializer.Serialize(imgToAdd);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync(NavigationManager.BaseUri + "plandb/create/exerciseimage/", content);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return;
        }
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        string jsonString = response.Content.ReadAsStringAsync().Result;
        ExerciseImage? returnImg = JsonSerializer.Deserialize<ExerciseImage>(jsonString, options);
        if (returnImg == null) return;

        // update exercise with new image
        exercise.ExerciseImageId = returnImg.Id;
        json = JsonSerializer.Serialize(exercise);
        content = new StringContent(json, Encoding.UTF8, "application/json");

        response = await HttpClient.PutAsync(NavigationManager.BaseUri + "plandb/update/exercise/" + exercise.Id, content);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
        imgUnsaved = false;
    }
}