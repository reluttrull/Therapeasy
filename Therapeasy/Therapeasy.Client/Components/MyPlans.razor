@page "/plans"
@page "/plans/{Username}"
@page "/plans/{Username}/{Detail?}"
@rendermode InteractiveServer
@using Therapeasy.Enums
@using Therapeasy.Model
@using System.Net
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Authorization

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h2>My Plans</h2>

<AuthorizeView Roles="Therapist,Admin" Context="authContext">
<div>
@foreach (Plan plan in plans)
{
  <div @key="plan" class="box">
    <ThisPlan PlanId=@plan.Id />
    <div>
      <button class="btn btn-danger" @onclick=@(e => DeletePlan(plan.Id))>Delete plan</button>
    </div>
  </div>
  <ConfirmDelete @ref="ConfirmDialog"
                Title="Delete Confirmation"
                Message="Are you sure you want to delete this item?"
                OnClose="HandleDialogClose" />
}
<h3>Add a plan:</h3>

<EditForm Model="@planToAdd" OnSubmit="Submit">
    <div><label>Plan name (do NOT use identifiable information)</label><InputText @bind-Value="planToAdd.Name" /></div>
    <div><label>Body region</label><InputSelect @bind-Value="planToAdd.BodyRegion">
        @foreach (Enum bodyRegion in Enum.GetValues(typeof(Enums.BodyRegion)))
        {
            <option value="@bodyRegion">@bodyRegion.GetDisplayName()</option>
        }
    </InputSelect></div>
    <div><button class="btn btn-success" type="submit">Add plan</button></div>
</EditForm>
</div>
</AuthorizeView>

@code {
    [Parameter]
    public string Username { get; set; } = "";
    [Parameter]
    public string Detail { get; set; } = "nodetail";
    List<Plan> plans = new();

    Plan planToAdd = new Plan();
    private ConfirmDelete ConfirmDialog;
    private int planDlt = -1;
    
    void DeletePlan(int id)
    {
      planDlt = id;
      ConfirmDialog.Show();
    }

    private async void HandleDialogClose(bool confirmed)
    {
        if (confirmed)
        {
          var response = await HttpClient.DeleteAsync(NavigationManager.BaseUri + "plandb/delete/plan/" + planDlt);
          await LoadPlans();
        }
        else
        {
          Console.WriteLine("Action canceled.");
        }
        planDlt = -1;
    }

    private async void Submit() 
    {
      // save new plan to db
      planToAdd.CreatedByUser = Username;
      planToAdd.DateCreated = DateTime.Now.Date;
      var json = JsonSerializer.Serialize(planToAdd);
      var content = new StringContent(json, Encoding.UTF8, "application/json");
      var response = await HttpClient.PostAsync(NavigationManager.BaseUri + "plandb/create/plan/", content);
      if (!response.IsSuccessStatusCode)
      {
          Console.WriteLine($"Error: {response.StatusCode}");
          return;
      }
      planToAdd = new();
      await LoadPlans();
      await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
      await LoadPlans();
    }
    private async Task LoadPlans() 
    {
        if (Username != "")
        {
          plans = await HttpClient.GetFromJsonAsync<List<Plan>>(NavigationManager.BaseUri + "plandb/get/plansforuser/" + WebUtility.UrlEncode(Username)) ?? new List<Plan>();
        }
    }
}