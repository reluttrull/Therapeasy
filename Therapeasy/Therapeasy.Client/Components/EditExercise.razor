@page "/editexercise"
@page "/editexercise/{ExerciseId:int}"
@page "/editexercise/{ExerciseId:int}/{Detail?}"
@rendermode InteractiveServer
@using Therapeasy.Model
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<AuthorizeView Roles="Therapist,Admin" Context="authContext">
    @if (exercise != null)
    {
        <EditForm Model="@exercise" OnSubmit="UpdateExercise">
            <div class="form-child form-label"><label>Exercise name (do NOT use identifiable information)</label></div>
            <div class="form-child"><InputText @bind-Value="exercise.Name" style="min-width:350px" /></div>
            <div class="form-child form-label"><label>Notes (do NOT use identifiable information)</label></div>
            <div class="form-child"><InputTextArea @bind-Value="exercise.Notes" style="min-width:350px; min-height:120px" /></div>
            <div class="form-child form-label"><label>Sets per day</label></div>
            <div class="form-child"><InputNumber @bind-Value="exercise.SetsPerDay" /></div>
            <div class="form-child form-label"><label>Reps per set</label></div>
            <div class="form-child"><InputNumber @bind-Value="exercise.RepsPerSet" /></div>
            <div><button class="btn-primary" type="submit">Update exercise</button></div>
        </EditForm>
    }
</AuthorizeView>

@code {
    [Parameter]
    public int ExerciseId { get; set; }
    [Parameter]
    public string Detail { get; set; } = "nodetail";
    [Parameter]
    public EventCallback OnUpdate { get; set; }
    public string Username { get; set; } = "";
    Exercise exercise = new Exercise();
    List<ExerciseImage> exerciseImages = new();

    private async void UpdateExercise() 
    {
      var json = JsonSerializer.Serialize(exercise);
      var content = new StringContent(json, Encoding.UTF8, "application/json");
      var response = await HttpClient.PutAsync(NavigationManager.BaseUri + "plandb/update/exercise/" + exercise.Id, content);
      if (!response.IsSuccessStatusCode)
      {
          Console.WriteLine($"Error: {response.StatusCode}");
          return;
      }
      await OnUpdate.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ExerciseId > 0)
        {
          var result = await HttpClient.GetFromJsonAsync<Exercise>(NavigationManager.BaseUri + "plandb/get/exercisefromid/" + ExerciseId);
          if (result != null)
          {
              exercise = result;
          }
        }
    }
}