@page "/plan"
@page "/plan/{PlanId:int}"
@page "/plan/{PlanId:int}/{Detail?}"

@rendermode InteractiveServer
@using QRCoder
@using Therapeasy.Enums
@using Therapeasy.Model
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<AuthorizeView Roles="Therapist,Admin" Context="authContext">
  <div style="float:right">
    <small>View</small>
    <div class="toggle-container" @onclick=@(e => IsEdit = !IsEdit)>
        <input type="checkbox" class="toggle-checkbox" checked="@IsEdit" />
        <span class="toggle-slider"></span>
    </div>
    <small>Edit</small>
  </div>
</AuthorizeView>

@if (IsEdit) {
  <EditPlan PlanId=@PlanId Detail=@Detail OnUpdate="HandlePlanUpdate" />
} else {
  <ViewPlan PlanId=@PlanId Detail=@Detail />
}

@code {
    [Parameter]
    public int PlanId { get; set; } = 0;
    [Parameter]
    public string Detail { get; set; } = "nodetail";
    private bool IsEdit = false;
    Plan plan = new Plan();

    List<PlanExerciseLink> planExerciseLinks = new();

    private void HandlePlanUpdate()
    {
        IsEdit = false;
    }

    protected override async Task OnInitializedAsync()
    {
      await LoadPlan();
    }
    private async Task LoadPlan()
    {
        if (PlanId > 0)
        {
          var responsePlan = await HttpClient.GetFromJsonAsync<Plan>(NavigationManager.BaseUri + "plandb/get/planfromid/" + PlanId);
          if (responsePlan != null)
          {
            plan = responsePlan;
            var responseLinks = await HttpClient.GetFromJsonAsync<List<PlanExerciseLink>>(NavigationManager.BaseUri + "plandb/get/planexerciselinksforplan/" + plan.Id);
            if (responseLinks != null) planExerciseLinks.AddRange(responseLinks);
          }
        }
    }
}